{"version":3,"sources":["components/AddCategorys.js","helper/getGif.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGif.js","gifExpertApp.js","index.js"],"names":["AddCategorys","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cat","type","value","onChange","target","getGif","category","a","url","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGif","GifExpertApp","categories","divRoot","document","getElementById","ReactDOM","render"],"mappings":"yMAGaA,EAAe,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEXC,mBAAS,IAFE,mBAExCC,EAFwC,KAE5BC,EAF4B,KAc/C,OACI,sBAAMC,SATW,SAACC,GAClBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAe,SAAAS,GAAG,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,MAKlB,SACI,uBACIO,KAAK,OACLC,MAAQT,EACRU,SAhBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,uBCPlBG,EAAM,uCAAI,WAAMC,GAAN,uBAAAC,EAAA,6DACfC,EADe,iDACgCF,EADhC,+DAEAG,MAAMD,GAFN,cAEbE,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAO,IAAD,EACzB,MAAM,CACFC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXT,IAAG,UAAEO,EAAIG,cAAN,aAAE,EAAYC,iBAAiBX,QATvB,kBAaZK,GAbY,4CAAJ,sDCENO,EAAc,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOT,EAAU,EAAVA,IACjC,OACI,sBAAKa,UAAU,yCAAf,UACI,qBAAKC,IAAMd,EAAMe,IAAMN,IACvB,kCAAKA,SCDJO,EAAU,SAAC,GAAgB,IAAflB,EAAc,EAAdA,SAAc,ECHZ,SAACA,GAAa,IAAD,EACVd,mBAAS,CAC/BoB,KAAO,GACPa,SAAQ,IAHwB,mBAC7BC,EAD6B,KACtBC,EADsB,KAepC,OATAC,qBAAU,WACNvB,EAAOC,GACFuB,MAAM,SAAAC,GACHH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAGtB,CAACnB,IACGoB,EDX0BK,CAAYzB,GAAhCY,EADsB,EAC3BN,KAAaa,EADc,EACdA,QAErB,OACI,qCACI,6BAAMnB,IACJmB,GAAW,mBAAGJ,UAAU,mCAAb,uBACb,qBAAKA,UAAU,8CAAf,SAEMH,EAAOJ,KAAI,SAACC,GAAD,OAAS,cAAC,EAAD,eAA+BA,GAAbA,EAAIC,aEa7CgB,EAvBM,WAAO,IAAD,EACaxC,mBAAS,CAAC,cADvB,mBAChByC,EADgB,KACJ1C,EADI,KAEvB,OACI,qCACI,8CACA,uBACA,cAAC,EAAD,CAAcA,cAAgBA,IAGtB0C,EAAWnB,KAAK,SAAAR,GACd,OAAO,cAAC,EAAD,2BAEWA,GAFX,IAGOA,SAAWA,IAFNA,UCVrC4B,G,MAAUC,SAASC,eAAe,SAEtCC,IAASC,OACP,cAAC,EAAD,IACAJ,K","file":"static/js/main.6ccb1ca8.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategorys = ({ setCategories }) => {\r\n\r\n    const [inputValue, setInputValue] = useState(\"\")\r\n    const handleInputChange = (e)=>{\r\n        setInputValue(e.target.value);\r\n    }\r\n    const handleSubmit = (e) =>{\r\n        e.preventDefault();\r\n        if(inputValue.trim().length > 2){\r\n            setCategories( cat => [inputValue, ...cat ] );\r\n            setInputValue('')\r\n        }\r\n        \r\n    }\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input \r\n                type=\"text\"\r\n                value={ inputValue}\r\n                onChange={ handleInputChange }\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategorys.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n};","export const getGif =  async(category)=>{\r\n    let url =`https://api.giphy.com/v1/gifs/search?q=${category}&limit=10&api_key=OzJy6pHWqXx0KDYhqKGXTlnsYLn2IPKe`;\r\n    const resp = await fetch(url);\r\n    const  {data}  = await resp.json();\r\n    \r\n    const gifs = data.map( img =>{\r\n        return{\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        };\r\n    });\r\n    \r\n    return gifs\r\n\r\n};","import React from 'react'\r\n\r\nexport const GifGridItem = ({ title, url }) => {\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src={ url } alt={ title } />\r\n            <p> {title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGif } from '../hooks/useFetchGif'\r\n// import { getGif } from '../helper/getGif';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({category}) => {\r\n    const { data:images, loading } = useFetchGif(category);\r\n\r\n    return (\r\n        <>\r\n            <h3>{ category }</h3>\r\n            { loading && <p className=\"animate__animated animate__flash\">Loading..</p>}\r\n            <div className=\"card-grid animate__animated animate__fadeIn\">\r\n                \r\n                { images.map((img) => <GifGridItem key={img.id} { ...img }/> ) }              \r\n\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n","import { useEffect, useState } from \"react\";\r\nimport {getGif} from '../helper/getGif';\r\nexport const useFetchGif = (category) =>{\r\n    const [state, setState] = useState({\r\n        data : [],\r\n        loading:true\r\n    });\r\n    \r\n    useEffect(() => {\r\n        getGif(category)\r\n            .then( imgs =>{\r\n                setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                });\r\n            });\r\n    }, [category]);\r\n    return state; \r\n}","import React, { useState } from 'react'\r\nimport { AddCategorys } from './components/AddCategorys'\r\nimport { GifGrid } from './components/GifGrid'\r\n\r\nconst GifExpertApp = () => {\r\n    const [categories, setCategories] = useState(['One punch'])\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <hr/>\r\n            <AddCategorys setCategories={ setCategories } />           \r\n            \r\n                {\r\n                    categories.map( category => {\r\n                      return <GifGrid \r\n                                    key={category}\r\n                                    {...category}\r\n                                    category={ category }\r\n                                />\r\n                    })\r\n                }\r\n            \r\n            \r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifExpertApp","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport GifExpertApp from './gifExpertApp';\r\nimport './index.css';\r\n\r\nlet divRoot = document.getElementById('root')\r\n\r\nReactDOM.render(\r\n  <GifExpertApp/>,\r\n  divRoot\r\n);\r\n"],"sourceRoot":""}